###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           20/Apr/2016  15:43:39
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.40
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\sc.c
#    Command line  =  
#        C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\sc.c -lC
#        C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\Debug\List -o
#        C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\Debug\List\sc.lst
#    Object file   =  
#        C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\Debug\Obj\sc.r43
#
###############################################################################

C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\sc.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the code related to serial communications
      4          //
      5          //
      6          //  Calvin Schmidt
      7          //  Feb 2016
      8          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
      9          //------------------------------------------------------------------------------
     10          
     11          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x5c0
   \   union <unnamed> _A_UCA0CTLW0_L
   \                     _A_UCA0CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c6
   \   union <unnamed> _A_UCA0BRW_L
   \                     _A_UCA0BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c8
   \   union <unnamed> _A_UCA0MCTLW_L
   \                     _A_UCA0MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5da
   \   union <unnamed> _A_UCA0IE_L
   \                     _A_UCA0IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e0
   \   union <unnamed> _A_UCA1CTLW0_L
   \                     _A_UCA1CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e6
   \   union <unnamed> _A_UCA1BRW_L
   \                     _A_UCA1BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e8
   \   union <unnamed> _A_UCA1MCTLW_L
   \                     _A_UCA1MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fa
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2
     12          #include  "functions.h"
     13          #include  "macros.h"
     14          
     15          extern int usb_rx_ring_wr;
     16          extern int usb_rx_ring_rd;
     17          extern int usb_tx_ring_wr;
     18          extern int usb_tx_ring_rd;
     19          extern char USB_Char_Tx[SMALL_RING_SIZE];
     20          extern char USB_Char_Rx[SMALL_RING_SIZE];
     21          extern char message[SMALL_RING_SIZE];
     22          extern char IOT_Char_Tx[SMALL_RING_SIZE];
     23          extern char IOT_Char_Rx[SMALL_RING_SIZE];
     24          extern int iot_tx_ring_wr;
     25          extern int iot_rx_ring_wr;
     26          extern int iot_tx_ring_rd;
     27          extern int iot_rx_ring_rd;
     28          // Dispaly Globals
     29          extern char *display_1;
     30          extern char *display_2;
     31          extern char *display_3;
     32          extern char *display_4;
     33          
     34          // #defines
     35          //  BEGINNING (0)
     36          //  SMALL_RING_SIZE (9)
     37          //----------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     38          void Init_Serial_UCA0(int baud_rate){
   \                     Init_Serial_UCA0:
     39            
     40            int i;
     41            for(i=0; i<SMALL_RING_SIZE; i++){
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA0_0:
   \   000002   3F900900     CMP.W   #0x9, R15
   \   000006   0434         JGE     ??Init_Serial_UCA0_2
     42              USB_Char_Rx[i] = 0x00; // USB Rx Buffer
   \   000008   CF43....     MOV.B   #0x0, USB_Char_Rx(R15)
     43            }
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   F93F         JMP     ??Init_Serial_UCA0_0
     44            usb_rx_ring_wr = BEGINNING;
   \                     ??Init_Serial_UCA0_2:
   \   000010   8243....     MOV.W   #0x0, &usb_rx_ring_wr
     45            usb_rx_ring_rd = BEGINNING;
   \   000014   8243....     MOV.W   #0x0, &usb_rx_ring_rd
     46            
     47            for(i=0; i<LARGE_RING_SIZE; i++){ // May not use this
   \   000018   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA0_1:
   \   00001A   3F901400     CMP.W   #0x14, R15
   \   00001E   0434         JGE     ??Init_Serial_UCA0_3
     48              USB_Char_Tx[i] = 0x00; // USB Tx Buffer
   \   000020   CF43....     MOV.B   #0x0, USB_Char_Tx(R15)
     49            }
   \   000024   1F53         ADD.W   #0x1, R15
   \   000026   F93F         JMP     ??Init_Serial_UCA0_1
     50            usb_tx_ring_wr = BEGINNING;
   \                     ??Init_Serial_UCA0_3:
   \   000028   8243....     MOV.W   #0x0, &usb_tx_ring_wr
     51            usb_tx_ring_rd = BEGINNING;
   \   00002C   8243....     MOV.W   #0x0, &usb_tx_ring_rd
     52            // Configure UART 0
     53            UCA0CTLW0 = 0; // Use word register
   \   000030   8243C005     MOV.W   #0x0, &0x5c0
     54            UCA0CTLW0 |= UCSSEL__SMCLK; // Set SMCLK as fBRCLK
   \   000034   B2D08000C005 BIS.W   #0x80, &0x5c0
     55            UCA0CTLW0 |= UCSWRST; // Set Software reset enable
   \   00003A   92D3C005     BIS.W   #0x1, &0x5c0
     56            UCA0BRW |= baud_rate; // 
   \   00003E   82DCC605     BIS.W   R12, &0x5c6
     57            
     58            if (baud_rate == 52) {
   \   000042   3C903400     CMP.W   #0x34, R12
   \   000046   0320         JNE     ??Init_Serial_UCA0_4
     59              UCA0MCTLW = 0x4911;
   \   000048   B2401149C805 MOV.W   #0x4911, &0x5c8
     60            }
     61            if (baud_rate == 4) {
   \                     ??Init_Serial_UCA0_4:
   \   00004E   2C92         CMP.W   #0x4, R12
   \   000050   0320         JNE     ??Init_Serial_UCA0_5
     62              UCA0MCTLW = 0x5551;
   \   000052   B2405155C805 MOV.W   #0x5551, &0x5c8
     63            }
     64          // UCA0MCTLW = UCSx concatenate UCFx concatenate UCOS16;
     65          // UCA0MCTLW = 0x49 concatenate 1 concatenate 1;
     66           UCA0CTL1 &= ~UCSWRST; // Release from reset
   \                     ??Init_Serial_UCA0_5:
   \   000058   D2C3C005     BIC.B   #0x1, &0x5c0
     67           UCA0IE |= UCRXIE; // Enable RX interrupt
   \   00005C   92D3DA05     BIS.W   #0x1, &0x5da
     68          }
   \   000060   1001         RETA
   \   000062                REQUIRE _A_UCA0CTLW0_L
   \   000062                REQUIRE _A_UCA0BRW_L
   \   000062                REQUIRE _A_UCA0MCTLW_L
   \   000062                REQUIRE _A_UCA0IE_L
     69           

   \                                 In  segment CODE, align 2
     70          void Init_Serial_UCA1(int baud_rate){
   \                     Init_Serial_UCA1:
     71            
     72            int i;
     73            for(i=0; i<SMALL_RING_SIZE; i++){
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA1_0:
   \   000002   3F900900     CMP.W   #0x9, R15
   \   000006   0434         JGE     ??Init_Serial_UCA1_2
     74              USB_Char_Rx[i] = 0x00; // USB Rx Buffer
   \   000008   CF43....     MOV.B   #0x0, USB_Char_Rx(R15)
     75            }
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   F93F         JMP     ??Init_Serial_UCA1_0
     76            iot_rx_ring_wr = BEGINNING;
   \                     ??Init_Serial_UCA1_2:
   \   000010   8243....     MOV.W   #0x0, &iot_rx_ring_wr
     77            iot_rx_ring_rd = BEGINNING;
   \   000014   8243....     MOV.W   #0x0, &iot_rx_ring_rd
     78            
     79            for(i=0; i<LARGE_RING_SIZE; i++){ // May not use this
   \   000018   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA1_1:
   \   00001A   3F901400     CMP.W   #0x14, R15
   \   00001E   0434         JGE     ??Init_Serial_UCA1_3
     80              USB_Char_Tx[i] = 0x00; // USB Tx Buffer
   \   000020   CF43....     MOV.B   #0x0, USB_Char_Tx(R15)
     81            }
   \   000024   1F53         ADD.W   #0x1, R15
   \   000026   F93F         JMP     ??Init_Serial_UCA1_1
     82            iot_tx_ring_wr = BEGINNING;
   \                     ??Init_Serial_UCA1_3:
   \   000028   8243....     MOV.W   #0x0, &iot_tx_ring_wr
     83            iot_tx_ring_rd = BEGINNING;
   \   00002C   8243....     MOV.W   #0x0, &iot_tx_ring_rd
     84            // Configure UART 0
     85            UCA1CTLW0 = 0; // Use word register
   \   000030   8243E005     MOV.W   #0x0, &0x5e0
     86            UCA1CTLW0 |= UCSSEL__SMCLK; // Set SMCLK as fBRCLK
   \   000034   B2D08000E005 BIS.W   #0x80, &0x5e0
     87            UCA1CTLW0 |= UCSWRST; // Set Software reset enable
   \   00003A   92D3E005     BIS.W   #0x1, &0x5e0
     88            UCA1BRW |= baud_rate; // 
   \   00003E   82DCE605     BIS.W   R12, &0x5e6
     89            
     90            if (baud_rate == 52) {
   \   000042   3C903400     CMP.W   #0x34, R12
   \   000046   0320         JNE     ??Init_Serial_UCA1_4
     91              UCA1MCTLW = 0x4911;
   \   000048   B2401149E805 MOV.W   #0x4911, &0x5e8
     92            }
     93            if (baud_rate == 4) {
   \                     ??Init_Serial_UCA1_4:
   \   00004E   2C92         CMP.W   #0x4, R12
   \   000050   0320         JNE     ??Init_Serial_UCA1_5
     94              UCA1MCTLW = 0x5551;
   \   000052   B2405155E805 MOV.W   #0x5551, &0x5e8
     95            }
     96          // UCA0MCTLW = UCSx concatenate UCFx concatenate UCOS16;
     97          // UCA0MCTLW = 0x49 concatenate 1 concatenate 1;
     98           UCA1CTL1 &= ~UCSWRST; // Release from reset
   \                     ??Init_Serial_UCA1_5:
   \   000058   D2C3E005     BIC.B   #0x1, &0x5e0
     99           UCA1IE |= UCRXIE; // Enable RX interrupt
   \   00005C   92D3FA05     BIS.W   #0x1, &0x5fa
    100          }
   \   000060   1001         RETA
   \   000062                REQUIRE _A_UCA1CTLW0_L
   \   000062                REQUIRE _A_UCA1BRW_L
   \   000062                REQUIRE _A_UCA1MCTLW_L
   \   000062                REQUIRE _A_UCA1IE_L
    101          
    102          
    103           
    104           
    105           

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Serial_UCA0
      4   Init_Serial_UCA1


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      98  Init_Serial_UCA0
      98  Init_Serial_UCA1
       2  _A_UCA0BRW_L
       2  _A_UCA0CTLW0_L
       2  _A_UCA0IE_L
       2  _A_UCA0MCTLW_L
       2  _A_UCA1BRW_L
       2  _A_UCA1CTLW0_L
       2  _A_UCA1IE_L
       2  _A_UCA1MCTLW_L

 
 196 bytes in segment CODE
  16 bytes in segment DATA16_AN
 
 196 bytes of CODE memory
   0 bytes of DATA memory (+ 16 bytes shared)

Errors: none
Warnings: none

###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           20/Apr/2016  15:43:39
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.40
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\timer.c
#    Command line  =  
#        C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\timer.c -lC
#        C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\Debug\List -o
#        C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\Debug\List\timer.lst
#    Object file   =  
#        C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\Debug\Obj\timer.r43
#
###############################################################################

C:\Users\Calvin\Dropbox\ncsu\ece306\Project8\timer.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the functions required for the timer
      4          //
      5          //
      6          //  Calvin Schmidt
      7          //  Feb 2016
      8          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x340
   \   unsigned short volatile TA0CTL
   \                     TA0CTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x342
   \   unsigned short volatile TA0CCTL0
   \                     TA0CCTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x344
   \   unsigned short volatile TA0CCTL1
   \                     TA0CCTL1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   unsigned short volatile TA0CCR0
   \                     TA0CCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x354
   \   unsigned short volatile TA0CCR1
   \                     TA0CCR1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x360
   \   unsigned short volatile TA0EX0
   \                     TA0EX0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x400
   \   unsigned short volatile TB1CTL
   \                     TB1CTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x404
   \   unsigned short volatile TB1CCTL1
   \                     TB1CCTL1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x406
   \   unsigned short volatile TB1CCTL2
   \                     TB1CCTL2:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x412
   \   unsigned short volatile TB1CCR0
   \                     TB1CCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x414
   \   unsigned short volatile TB1CCR1
   \                     TB1CCR1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x416
   \   unsigned short volatile TB1CCR2
   \                     TB1CCR2:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x440
   \   unsigned short volatile TB2CTL
   \                     TB2CTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x444
   \   unsigned short volatile TB2CCTL1
   \                     TB2CCTL1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x446
   \   unsigned short volatile TB2CCTL2
   \                     TB2CCTL2:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x452
   \   unsigned short volatile TB2CCR0
   \                     TB2CCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   unsigned short volatile TB2CCR1
   \                     TB2CCR1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   unsigned short volatile TB2CCR2
   \                     TB2CCR2:
   \   000000                DS8 2
     14          #include  "functions.h"
     15          #include  "macros.h"
     16          
     17          extern volatile unsigned char control_state[CNTL_STATE_INDEX];
     18          extern volatile unsigned int Time_Sequence;
     19          extern volatile char one_time;
     20          extern int msec_count;
     21          //
     22          extern int SW1Press;
     23          extern int SW2Press;
     24          extern int SW1Debounce;
     25          extern int SW2Debounce;
     26          // PWM
     27          extern int right_forward_rate;
     28          extern int right_reverse_rate;
     29          extern int left_forward_rate;
     30          extern int left_reverse_rate;
     31          
     32          

   \                                 In  segment CODE, align 2
     33          void Init_Timers(void){  
   \                     Init_Timers:
     34          //------------------------------------------------------------------------------
     35          // Description: This function contains the Timer Configurations
     36          //
     37          //  Calvin Schmidt
     38          //  Feb 2016
     39          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)  
     40          //------------------------------------------------------------------------------
     41            Init_Timer_A0();      //
   \   000000   ........     CALLA   #Init_Timer_A0
     42          //  Init_Timer_A1();    // 
     43          //  Init_Timer_B0();    // 
     44            Init_Timer_B1();      //  For PWN  
   \   000004   ........     CALLA   #Init_Timer_B1
     45            Init_Timer_B2();      //  Required for provided compiled code to work
   \   000008   ........     BRA     #Init_Timer_B2
     46          //------------------------------------------------------------------------------
     47          }
     48          
     49          //------------------------------------------------------------------------------
     50          // Description: Waits five milliseconds * delay
     51          //
     52          //  Calvin Schmidt
     53          //  Feb 2016
     54          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1) 
     55          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     56          void five_msec_delay(int delay){
   \                     five_msec_delay:
     57            msec_count = CLEAR;
   \   000000   8243....     MOV.W   #0x0, &msec_count
     58             TA0CCTL1 |= CCIE;
   \   000004   B2D010004403 BIS.W   #0x10, &0x344
     59            while(msec_count < delay){
   \                     ??five_msec_delay_0:
   \   00000A   829C....     CMP.W   R12, &msec_count
   \   00000E   FD3B         JL      ??five_msec_delay_0
     60            }
     61              TA0CCTL1 &= ~CCIE;
   \   000010   B2C010004403 BIC.W   #0x10, &0x344
     62          }
   \   000016   1001         RETA
   \   000018                REQUIRE TA0CCTL1
     63          

   \                                 In  segment CODE, align 2
     64          void Init_Timer_A0(void) {
   \                     Init_Timer_A0:
     65          //------------------------------------------------------------------------------
     66          // Description: Timer A0 initialization sets up both A0_0 and A0_1-A0_2
     67          //
     68          //  Calvin Schmidt
     69          //  Feb 2016
     70          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1) 
     71          //------------------------------------------------------------------------------
     72           TA0CTL = TASSEL__SMCLK; // SMCLK source
   \   000000   B24000024003 MOV.W   #0x200, &0x340
     73           TA0CTL |= TACLR; // Resets TA0R, clock divider, count direction
   \   000006   A2D24003     BIS.W   #0x4, &0x340
     74           TA0CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D020004003 BIS.W   #0x20, &0x340
     75           TA0CTL |= ID__8; // Divide clock by 8
   \   000010   B2D0C0004003 BIS.W   #0xc0, &0x340
     76           TA0CTL &= ~TAIE; // Disable Overflow Interrupt
   \   000016   A2C34003     BIC.W   #0x2, &0x340
     77           TA0CTL &= ~TAIFG; // Clear Overflow Interrupt flag
   \   00001A   92C34003     BIC.W   #0x1, &0x340
     78          
     79           TA0EX0 = TAIDEX_7; // Divide clock by an additional 8
   \   00001E   B24007006003 MOV.W   #0x7, &0x360
     80           
     81           TA0CCR0 = TA0CCR0_INTERVAL; // CCR0 (6250)
   \   000024   B240A8615203 MOV.W   #0x61a8, &0x352
     82           TA0CCTL0 &= ~CCIE; // CCR0 Disable interrupt
   \   00002A   B2C010004203 BIC.W   #0x10, &0x342
     83          
     84           TA0CCR1 = TA0CCR1_INTERVAL; // CCR1
   \   000030   B24071025403 MOV.W   #0x271, &0x354
     85           TA0CCTL1 &= ~CCIE; // CCR1 Disable interrupt
   \   000036   B2C010004403 BIC.W   #0x10, &0x344
     86          
     87          // TA0CCR2 = TA0CCR2_INTERVAL; // CCR2
     88          // TA0CCTL2 |= CCIE; // CCR2 enable interrupt
     89          }
   \   00003C   1001         RETA
   \   00003E                REQUIRE TA0CTL
   \   00003E                REQUIRE TA0EX0
   \   00003E                REQUIRE TA0CCR0
   \   00003E                REQUIRE TA0CCTL0
   \   00003E                REQUIRE TA0CCR1
   \   00003E                REQUIRE TA0CCTL1
     90          //------------------------------------------------------------------------------ 
     91          

   \                                 In  segment CODE, align 2
     92          void Init_Timer_B1(void) {
   \                     Init_Timer_B1:
     93          //------------------------------------------------------------------------------
     94          // SMCLK source, up count mode, PWM Right Side
     95          //------------------------------------------------------------------------------
     96          TB1CTL = TBSSEL__SMCLK; // SMCLK
   \   000000   B24000020004 MOV.W   #0x200, &0x400
     97          TB1CTL |= MC_1; // Up Mode
   \   000006   B2D010000004 BIS.W   #0x10, &0x400
     98          TB1CTL |= TBCLR; // Clear TAR
   \   00000C   A2D20004     BIS.W   #0x4, &0x400
     99          
    100          right_forward_rate = OFF; // Set Right Forward Off
   \   000010   8243....     MOV.W   #0x0, &right_forward_rate
    101          right_reverse_rate = OFF; // Set Right Reverse Off
   \   000014   8243....     MOV.W   #0x0, &right_reverse_rate
    102          
    103          TB1CCR0 = WHEEL_PERIOD; // PWM Period
   \   000018   B240401F1204 MOV.W   #0x1f40, &0x412
    104          TB1CCTL1 = OUTMOD_7; // CCR1 reset/set
   \   00001E   B240E0000404 MOV.W   #0xe0, &0x404
    105          TB1CCR1 = right_forward_rate; // P3.4 Right Forward PWM duty cycle
   \   000024   9242....1404 MOV.W   &right_forward_rate, &0x414
    106          TB1CCTL2 = OUTMOD_7; // CCR2 reset/set
   \   00002A   B240E0000604 MOV.W   #0xe0, &0x406
    107          TB1CCR2 = right_reverse_rate; // P3.5 Right Reverse PWM duty cycle
   \   000030   9242....1604 MOV.W   &right_reverse_rate, &0x416
    108          //------------------------------------------------------------------------------
    109          }
   \   000036   1001         RETA
   \   000038                REQUIRE TB1CTL
   \   000038                REQUIRE TB1CCR0
   \   000038                REQUIRE TB1CCTL1
   \   000038                REQUIRE TB1CCR1
   \   000038                REQUIRE TB1CCTL2
   \   000038                REQUIRE TB1CCR2
    110          

   \                                 In  segment CODE, align 2
    111          void Init_Timer_B2(void) {
   \                     Init_Timer_B2:
    112          //------------------------------------------------------------------------------
    113          // SMCLK source, up count mode, PWM Left Side
    114          //------------------------------------------------------------------------------
    115          TB2CTL = TBSSEL__SMCLK; // SMCLK
   \   000000   B24000024004 MOV.W   #0x200, &0x440
    116          TB2CTL |= MC_1; // Up Mode
   \   000006   B2D010004004 BIS.W   #0x10, &0x440
    117          TB2CTL |= TBCLR; // Clear TAR
   \   00000C   A2D24004     BIS.W   #0x4, &0x440
    118          
    119          left_forward_rate = OFF; // Set Left Forward Off
   \   000010   8243....     MOV.W   #0x0, &left_forward_rate
    120          left_reverse_rate = OFF; // Set Left Reverse Off
   \   000014   8243....     MOV.W   #0x0, &left_reverse_rate
    121          
    122          TB2CCR0 = WHEEL_PERIOD; // PWM Period
   \   000018   B240401F5204 MOV.W   #0x1f40, &0x452
    123          TB2CCTL1 = OUTMOD_7; // CCR1 reset/set
   \   00001E   B240E0004404 MOV.W   #0xe0, &0x444
    124          TB2CCR1 = left_forward_rate; // P3.4 Right Forward PWM duty cycle
   \   000024   9242....5404 MOV.W   &left_forward_rate, &0x454
    125          TB2CCTL2 = OUTMOD_7; // CCR2 reset/set
   \   00002A   B240E0004604 MOV.W   #0xe0, &0x446
    126          TB2CCR2 = left_reverse_rate; // P3.5 Right Reverse PWM duty cycle
   \   000030   9242....5604 MOV.W   &left_reverse_rate, &0x456
    127          //------------------------------------------------------------------------------
    128          }
   \   000036   1001         RETA
   \   000038                REQUIRE TB2CTL
   \   000038                REQUIRE TB2CCR0
   \   000038                REQUIRE TB2CCTL1
   \   000038                REQUIRE TB2CCR1
   \   000038                REQUIRE TB2CCTL2
   \   000038                REQUIRE TB2CCR2
    129          
    130          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_A0
      4   Init_Timer_B1
      4   Init_Timer_B2
      4   Init_Timers
        4   -> Init_Timer_A0
        4   -> Init_Timer_B1
        0   -> Init_Timer_B2
      4   five_msec_delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      62  Init_Timer_A0
      56  Init_Timer_B1
      56  Init_Timer_B2
      12  Init_Timers
       2  TA0CCR0
       2  TA0CCR1
       2  TA0CCTL0
       2  TA0CCTL1
       2  TA0CTL
       2  TA0EX0
       2  TB1CCR0
       2  TB1CCR1
       2  TB1CCR2
       2  TB1CCTL1
       2  TB1CCTL2
       2  TB1CTL
       2  TB2CCR0
       2  TB2CCR1
       2  TB2CCR2
       2  TB2CCTL1
       2  TB2CCTL2
       2  TB2CTL
      24  five_msec_delay

 
 210 bytes in segment CODE
  36 bytes in segment DATA16_AN
 
 210 bytes of CODE memory
   0 bytes of DATA memory (+ 36 bytes shared)

Errors: none
Warnings: none
